# Config file for [Air](https://github.com/cosmtrek/air) in TOML format 格式的配置文件

# Working directory 工作目录
# . or absolute path, please note that the directories following must be under root.
# 使用 . 或绝对路径，请注意 `tmp_dir` 目录必须在 `root` 目录下
root = "."
tmp_dir = "tmp"

[build]
# Just plain old shell command. You could use `make` as well.
# 只需要写你平常编译使用的shell命令。你也可以使用 `make`
# cmd = "go build -o ./tmp/main ."
cmd = "go build -o ./reptile-go.exe"
# Binary file yields from `cmd`.
# 由`cmd`命令得到的二进制文件名
# bin = "tmp/main"
bin = "./reptile-go.exe"
# Customize binary.
# 自定义的二进制，可以添加额外的编译标识例如添加 GIN_MODE=release
# full_bin = "APP_ENV=dev APP_USER=air ./tmp/main"

# Watch these filename extensions.
# 监听以下文件扩展名的文件.
include_ext = ["go", "tpl", "tmpl", "html"]
# Ignore these filename extensions or directories.
# 忽略这些文件扩展名或目录
exclude_dir = ["assets", "tmp", "vendor", "frontend/node_modules","mnt",".git",".idea"]
# Watch these directories if you specified.
# 监听以下指定目录的文件
include_dir = []
# Exclude files.
# 排除以下文件
exclude_file = []
# This log file places in your tmp_dir.
# air的日志文件名，该日志文件放置在你的`tmp_dir`中
log = "air.log"
# It's not necessary to trigger build each time file changes if it's too frequent.
# 如果文件更改过于频繁，则没有必要在每次更改时都触发构建。可以设置触发构建的延迟时间
delay = 1000 # ms
# Stop running old binary when build errors occur.
# 发生构建错误时，停止运行旧的二进制文件。
stop_on_error = true
# Send Interrupt signal before killing process (windows does not support this feature)
# 在终止进程之前发送中断信号（Windows不支持此功能）
send_interrupt = false
# Delay after sending Interrupt signal
# 发送中断信号后的延迟
kill_delay = 500 # ms

[log]
# Show log time
# 显示日志时间
time = true

[color]
# Customize each part's color. If no color found, use the raw app log.
# 自定义每个部分显示的颜色。如果找不到颜色，使用原始的应用程序日志。
main = "magenta"
watcher = "cyan"
build = "yellow"
runner = "green"

[misc]
# Delete tmp directory on exit
# 退出时删除tmp目录
clean_on_exit = true
